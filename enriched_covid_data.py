# -*- coding: utf-8 -*-
"""enriched_covid_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HrnQl936TyRxKxP5ZStk_7V_sv3qJ5_w

# Data review and processing:
Objective:
1. View basic data information
2. Calculate daily new confirmed and death cases and optimize data
"""

from pyspark.sql import SparkSession
from pyspark.sql.functions import col, to_date, year, month, avg, sum as _sum, expr, lit
import requests

#  Download JSON from GitHub
url = "https://raw.githubusercontent.com/Aless13260/covid-pipeline/main/sample_data.json"
local_path = "/tmp/sample_data.json"
with open(local_path, "w") as f:
    f.write(requests.get(url).text)
df=pd.read_json(url)
# mian info check
print(df.head(10))
print(f"Total rows: {len(df)}")
print(f"Total rows with missing value:\n{df.isna().sum()}")

#unique values check

# for country
countries = df["country"].dropna().unique().tolist()
countries.sort()
print(f"Total unique countries: {len(countries)}")
print("Countries are:", countries[:])

#for state
states=df["state"].dropna().unique().tolist()
states.sort()
df["state"].unique()
print(f"Total unique sates: {len(states)}")
print("States are:", states[:])

"""**Observatone1:**
According to the results of the missing value check, the national data is basically unavailable, but most of the state data are missing. In this case , for the subsequent analysis, the geographical location analysis will mainly focus on the country.

**Observatone2:**
Death data is more lacking than confirmed data, and data sources may not be comprehensive enough for death statistics.Similarly, some of the confirmed data is missing
"""

# Start Spark session
spark = (
    SparkSession.builder
    .appName("CovidDataPipeline")
    .getOrCreate()
)

# Load JSON with schema
df_raw = (
    spark.read
    .schema("""
        state       STRING,
        parliament  STRING,
        gender      STRING,
        population  INT,
        date        STRING
    """)
    .json(local_path)
    .repartition(200)
)

# Enrich data: add Daily new confirmed cases daily_new_cases and daily new deaths to the original DataFrame
# Sort by country, state, date
df = df.sort_values(["country", "state", "date"])

# New daily confirmed cases
df["prev_confirmed"] = df.groupby(["country", "state"])["confirmed"].shift(1)
df["daily_new_cases"] = df["confirmed"] - df["prev_confirmed"]

# New deaths per day
df["prev_deaths"] = df.groupby(["country", "state"])["deaths"].shift(1)
df["daily_new_deaths"] = df["deaths"] - df["prev_deaths"]

# Fill missing values ​​with 0 (first day /null value processing)
df["daily_new_cases"] = df["daily_new_cases"].fillna(0)
df["daily_new_deaths"] = df["daily_new_deaths"].fillna(0)

#check the new dataframe
print(df[["date", "country", "state", "confirmed", "daily_new_cases", "deaths", "daily_new_deaths"]].head(10))

#save the dataframe
df_enriched = df.copy()
df_enriched.to_json("enriched_covid_data.json", orient="records", date_format="iso")

